{"version":3,"file":"UsersRoutes.js","names":["router","Router","post","auth","isAuth","isAdmin","body","isEmail","withMessage","trim","custom","value","Users","findOne","email","then","result","Promise","reject","normalizeEmail","not","isEmpty","isLength","min","isIn","validation","IndexControllers","UsersController","createUser","get","getAllUsers","param","isMongoId","isUser","getOneUser","put","updateUserProfile","req","findById","params","userId","password","bcrypt","compare","isEqual","updateUserPassword","updateUserType","deleteUser"],"sources":["../../server/routes/UsersRoutes.js"],"sourcesContent":["import { Router } from \"express\";\nimport { body, param } from \"express-validator\";\nimport bcrypt from \"bcryptjs\";\n\nimport IndexControllers from \"../controllers/IndexControllers\";\nimport validation from \"../helper/validation\";\nimport auth from \"../helper/auth\";\nimport Users from \"../models/users\";\n\nconst router = Router();\n\nrouter.post(\n  \"/create\",\n  auth.isAuth,\n  auth.isAdmin,\n  [\n    body(\"email\")\n      .isEmail()\n      .withMessage(\"Please enter valid email\")\n      .trim()\n      .custom((value) => {\n        return Users.findOne({ email: value }).then((result) => {\n          if (result) {\n            return Promise.reject(\"Email already exists\");\n          }\n        });\n      })\n      .normalizeEmail(),\n    body(\"username\")\n      .trim()\n      .not()\n      .isEmpty()\n      .withMessage(\"Username should not empty\"),\n    body(\"fullname\")\n      .trim()\n      .not()\n      .isEmpty()\n      .withMessage(\"Fullname should not empty\"),\n    body(\"password\")\n      .trim()\n      .isLength({ min: 7 })\n      .withMessage(\"Password minimal length 7\"),\n    body(\"type\")\n      .trim()\n      .isIn([\"admin\", \"user\"])\n      .withMessage(\"Type value should admin or user\"),\n  ],\n  validation.result,\n  IndexControllers.UsersController.createUser\n);\n\nrouter.get(\n  \"/all\",\n  auth.isAuth,\n  auth.isAdmin,\n  IndexControllers.UsersController.getAllUsers\n);\n\nrouter.get(\n  \"/one/:userId\",\n  auth.isAuth,\n  [param(\"userId\").isMongoId().withMessage(\"Invalid ID\")],\n  validation.result,\n  auth.isUser,\n  IndexControllers.UsersController.getOneUser\n);\n\nrouter.put(\n  \"/profile/:userId\",\n  auth.isAuth,\n  auth.isAdmin,\n  [\n    param(\"userId\").isMongoId().withMessage(\"Invalid user ID\"),\n    body(\"email\")\n      .isEmail()\n      .withMessage(\"Please enter valid email\")\n      .trim()\n      .normalizeEmail(),\n    body(\"username\")\n      .trim()\n      .not()\n      .isEmpty()\n      .withMessage(\"Username should not empty\"),\n    body(\"fullname\")\n      .trim()\n      .not()\n      .isEmpty()\n      .withMessage(\"Fullname should not empty\"),\n  ],\n  validation.result,\n  IndexControllers.UsersController.updateUserProfile\n);\n\nrouter.put(\n  \"/password/:userId\",\n  auth.isAuth,\n  auth.isAdmin,\n  [\n    param(\"userId\").isMongoId().withMessage(\"Invalid user ID\"),\n    body(\"newPassword\")\n      .trim()\n      .isLength({ min: 7 })\n      .withMessage(\"Password minimal length 7\"),\n    body(\"oldPassword\")\n      .trim()\n      .custom((value, { req }) => {\n        return Users.findById(req.params.userId, { password: 1 })\n          .then((result) => {\n            if (!result) return Promise.reject(\"Could not find user\");\n            return bcrypt.compare(value, result.password);\n          })\n          .then((isEqual) => {\n            if (!isEqual) return Promise.reject(\"Old password wrong\");\n          });\n      }),\n  ],\n  validation.result,\n  IndexControllers.UsersController.updateUserPassword\n);\n\nrouter.put(\n  \"/type/:userId\",\n  auth.isAuth,\n  auth.isAdmin,\n  [\n    param(\"userId\").isMongoId().withMessage(\"Invalid user ID\"),\n    body(\"type\")\n      .trim()\n      .isIn([\"admin\", \"user\"])\n      .withMessage(\"Type value should admin or user\"),\n  ],\n  validation.result,\n  IndexControllers.UsersController.updateUserType\n);\n\nrouter.delete(\n  \"/delete/:userId\",\n  auth.isAuth,\n  auth.isAdmin,\n  [param(\"userId\").isMongoId().withMessage(\"Invalid user ID\")],\n  validation.result,\n  IndexControllers.UsersController.deleteUser\n);\n\nexport default router;\n"],"mappings":"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"}